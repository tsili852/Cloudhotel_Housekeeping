"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@ngrx/core/add/operator/select");
var reselect_1 = require("reselect");
var compose_1 = require("@ngrx/core/compose");
var store_1 = require("@ngrx/store");
var rooms_list_1 = require("./rooms-list"), fromRoomList = rooms_list_1;
var repairs_list_1 = require("./repairs-list"), fromRepairList = repairs_list_1;
var technitian_list_1 = require("./technitian-list"), fromTechnitianList = technitian_list_1;
;
exports.default = compose_1.compose(store_1.combineReducers)({
    rooms: rooms_list_1.default,
    repairs: repairs_list_1.default,
    technitians: technitian_list_1.default
});
exports.getRoomsState = function (state) { return state.rooms; };
exports.getRepairsState = function (state) { return state.repairs; };
exports.getTechnitiansState = function (state) { return state.technitians; };
exports.getRepairsLoading = reselect_1.createSelector(exports.getRepairsState, fromRepairList.getLoading);
exports.getRepairsLoaded = reselect_1.createSelector(exports.getRepairsState, fromRepairList.getLoaded);
exports.getRepairs = reselect_1.createSelector(exports.getRepairsState, fromRepairList.repairs);
exports.getRoomsLoading = reselect_1.createSelector(exports.getRoomsState, fromRoomList.getLoading);
exports.getRoomsLoaded = reselect_1.createSelector(exports.getRoomsState, fromRoomList.getLoaded);
exports.getRooms = reselect_1.createSelector(exports.getRoomsState, fromRoomList.rooms);
exports.getTechnitiansLoading = reselect_1.createSelector(exports.getTechnitiansState, fromTechnitianList.getLoading);
exports.getTechnitiansLoaded = reselect_1.createSelector(exports.getTechnitiansState, fromTechnitianList.getLoaded);
exports.getTechnitians = reselect_1.createSelector(exports.getTechnitiansState, fromTechnitianList.technitians);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUF1QztBQUN2QyxxQ0FBMEM7QUFDMUMsOENBQTZDO0FBQzdDLHFDQUE4QztBQUU5Qyx3RUFBOEQ7QUFDOUQsZ0ZBQW9FO0FBQ3BFLDZGQUE4RTtBQU03RSxDQUFDO0FBRUYsa0JBQWUsaUJBQU8sQ0FBQyx1QkFBZSxDQUFDLENBQUM7SUFDcEMsS0FBSyxFQUFFLG9CQUFlO0lBQ3RCLE9BQU8sRUFBRSxzQkFBaUI7SUFDMUIsV0FBVyxFQUFFLHlCQUFxQjtDQUNyQyxDQUFDLENBQUM7QUFFVSxRQUFBLGFBQWEsR0FBRyxVQUFDLEtBQWUsSUFBSyxPQUFBLEtBQUssQ0FBQyxLQUFLLEVBQVgsQ0FBVyxDQUFDO0FBQ2pELFFBQUEsZUFBZSxHQUFHLFVBQUMsS0FBZSxJQUFLLE9BQUEsS0FBSyxDQUFDLE9BQU8sRUFBYixDQUFhLENBQUM7QUFDckQsUUFBQSxtQkFBbUIsR0FBRyxVQUFDLEtBQWUsSUFBSyxPQUFBLEtBQUssQ0FBQyxXQUFXLEVBQWpCLENBQWlCLENBQUM7QUFFN0QsUUFBQSxpQkFBaUIsR0FBRyx5QkFBYyxDQUFDLHVCQUFlLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQy9FLFFBQUEsZ0JBQWdCLEdBQUcseUJBQWMsQ0FBQyx1QkFBZSxFQUFFLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3RSxRQUFBLFVBQVUsR0FBRyx5QkFBYyxDQUFDLHVCQUFlLEVBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXJFLFFBQUEsZUFBZSxHQUFHLHlCQUFjLENBQUMscUJBQWEsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDekUsUUFBQSxjQUFjLEdBQUcseUJBQWMsQ0FBQyxxQkFBYSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2RSxRQUFBLFFBQVEsR0FBRyx5QkFBYyxDQUFDLHFCQUFhLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTdELFFBQUEscUJBQXFCLEdBQUcseUJBQWMsQ0FBQywyQkFBbUIsRUFBRSxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzRixRQUFBLG9CQUFvQixHQUFHLHlCQUFjLENBQUMsMkJBQW1CLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDekYsUUFBQSxjQUFjLEdBQUcseUJBQWMsQ0FBQywyQkFBbUIsRUFBRSxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQG5ncngvY29yZS9hZGQvb3BlcmF0b3Ivc2VsZWN0J1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSBcIkBuZ3J4L2NvcmUvY29tcG9zZVwiO1xyXG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwiQG5ncngvc3RvcmVcIjtcclxuXHJcbmltcG9ydCByb29tTGlzdFJlZHVjZXIsICogYXMgZnJvbVJvb21MaXN0IGZyb20gJy4vcm9vbXMtbGlzdCc7XHJcbmltcG9ydCByZXBhaXJMaXN0UmVkdWNlciwgKiBhcyBmcm9tUmVwYWlyTGlzdCBmcm9tICcuL3JlcGFpcnMtbGlzdCc7XHJcbmltcG9ydCB0ZWNobml0aWFuTGlzdFJlZHVjZXIsICogYXMgZnJvbVRlY2huaXRpYW5MaXN0IGZyb20gJy4vdGVjaG5pdGlhbi1saXN0J1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBTdGF0ZSB7XHJcbiAgICByb29tczogZnJvbVJvb21MaXN0LlJvb21MaXN0U3RhdGU7XHJcbiAgICByZXBhaXJzOiBmcm9tUmVwYWlyTGlzdC5SZXBhaXJMaXN0U3RhdGU7XHJcbiAgICB0ZWNobml0aWFuczogZnJvbVRlY2huaXRpYW5MaXN0LlRlY2huaXRpYW5MaXN0U3RhdGU7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKGNvbWJpbmVSZWR1Y2Vycykoe1xyXG4gICAgcm9vbXM6IHJvb21MaXN0UmVkdWNlcixcclxuICAgIHJlcGFpcnM6IHJlcGFpckxpc3RSZWR1Y2VyLFxyXG4gICAgdGVjaG5pdGlhbnM6IHRlY2huaXRpYW5MaXN0UmVkdWNlclxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSb29tc1N0YXRlID0gKHN0YXRlOiBBcHBTdGF0ZSkgPT4gc3RhdGUucm9vbXM7XHJcbmV4cG9ydCBjb25zdCBnZXRSZXBhaXJzU3RhdGUgPSAoc3RhdGU6IEFwcFN0YXRlKSA9PiBzdGF0ZS5yZXBhaXJzO1xyXG5leHBvcnQgY29uc3QgZ2V0VGVjaG5pdGlhbnNTdGF0ZSA9IChzdGF0ZTogQXBwU3RhdGUpID0+IHN0YXRlLnRlY2huaXRpYW5zO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlcGFpcnNMb2FkaW5nID0gY3JlYXRlU2VsZWN0b3IoZ2V0UmVwYWlyc1N0YXRlLCBmcm9tUmVwYWlyTGlzdC5nZXRMb2FkaW5nKTtcclxuZXhwb3J0IGNvbnN0IGdldFJlcGFpcnNMb2FkZWQgPSBjcmVhdGVTZWxlY3RvcihnZXRSZXBhaXJzU3RhdGUsIGZyb21SZXBhaXJMaXN0LmdldExvYWRlZCk7XHJcbmV4cG9ydCBjb25zdCBnZXRSZXBhaXJzID0gY3JlYXRlU2VsZWN0b3IoZ2V0UmVwYWlyc1N0YXRlLCBmcm9tUmVwYWlyTGlzdC5yZXBhaXJzKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSb29tc0xvYWRpbmcgPSBjcmVhdGVTZWxlY3RvcihnZXRSb29tc1N0YXRlLCBmcm9tUm9vbUxpc3QuZ2V0TG9hZGluZyk7XHJcbmV4cG9ydCBjb25zdCBnZXRSb29tc0xvYWRlZCA9IGNyZWF0ZVNlbGVjdG9yKGdldFJvb21zU3RhdGUsIGZyb21Sb29tTGlzdC5nZXRMb2FkZWQpO1xyXG5leHBvcnQgY29uc3QgZ2V0Um9vbXMgPSBjcmVhdGVTZWxlY3RvcihnZXRSb29tc1N0YXRlLCBmcm9tUm9vbUxpc3Qucm9vbXMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFRlY2huaXRpYW5zTG9hZGluZyA9IGNyZWF0ZVNlbGVjdG9yKGdldFRlY2huaXRpYW5zU3RhdGUsIGZyb21UZWNobml0aWFuTGlzdC5nZXRMb2FkaW5nKTtcclxuZXhwb3J0IGNvbnN0IGdldFRlY2huaXRpYW5zTG9hZGVkID0gY3JlYXRlU2VsZWN0b3IoZ2V0VGVjaG5pdGlhbnNTdGF0ZSwgZnJvbVRlY2huaXRpYW5MaXN0LmdldExvYWRlZCk7XHJcbmV4cG9ydCBjb25zdCBnZXRUZWNobml0aWFucyA9IGNyZWF0ZVNlbGVjdG9yKGdldFRlY2huaXRpYW5zU3RhdGUsIGZyb21UZWNobml0aWFuTGlzdC50ZWNobml0aWFucyk7Il19