"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var router_1 = require("nativescript-angular/router");
var applicationSettings = require("tns-core-modules/application-settings");
var room_service_1 = require("../../shared/room/room.service");
var technitian_list_service_1 = require("../../shared/technitian/technitian-list.service");
var drawer_page_1 = require("../drawer.page");
var store_1 = require("@ngrx/store");
var index_1 = require("../../actions/index");
var element_registry_1 = require("nativescript-angular/element-registry");
element_registry_1.registerElement("Fab", function () { return require("nativescript-floatingactionbutton").Fab; });
var fromRoot = require("../../reducers/index");
var TechRoomsComponent = /** @class */ (function (_super) {
    __extends(TechRoomsComponent, _super);
    function TechRoomsComponent(routerExtensions, page, roomService, technitianListService, zone, store, roomActions, changeDetectorRef) {
        var _this = _super.call(this, changeDetectorRef) || this;
        _this.routerExtensions = routerExtensions;
        _this.page = page;
        _this.roomService = roomService;
        _this.technitianListService = technitianListService;
        _this.zone = zone;
        _this.store = store;
        _this.roomActions = roomActions;
        _this.changeDetectorRef = changeDetectorRef;
        _this.skipRooms = 0;
        _this.takeRooms = 20;
        _this.selectedNavButton = 1;
        _this.daysBefore = 0;
        _this.roomsList = [];
        _this.rooom = "";
        _this.isClean = false;
        _this.store.dispatch(_this.roomActions.loadRooms(_this.skipRooms, _this.takeRooms, _this.daysBefore));
        _this.rooms = store.select(fromRoot.getRooms);
        _this.rooms.subscribe(function (rooms) {
            _this.roomsArray = new Array();
            rooms.forEach(function (room) {
                _this.roomsArray.push(room);
            });
        });
        _this.isLoading = store.select(fromRoot.getRoomsLoading);
        _this.isLoading.subscribe(function (loading) {
            console.log(JSON.stringify(loading));
        });
        return _this;
    }
    TechRoomsComponent.prototype.ngOnInit = function () {
        this.page.actionBarHidden = false;
        // this.rooms = this.roomService.getAllRooms();
        // let techId = applicationSettings.getString("activeTechnitianId");
        // if (techId) {
        //     this.technitian = this.technitianListService.getFromId(techId);
        // } else {
        //     this.routerExtensions.navigate(["/technitians"], { clearHistory: true });
        // }
    };
    TechRoomsComponent.prototype.changeTechnitian = function () {
        applicationSettings.setString("activeTechnitian", "");
        this.routerExtensions.navigate(["/technitians"], { clearHistory: true });
    };
    TechRoomsComponent.prototype.onPendingSelected = function () {
        this.selectedNavButton = 1;
        this.daysBefore = 0;
        this.store.dispatch(this.roomActions.loadRooms(this.skipRooms, this.takeRooms, this.daysBefore));
    };
    TechRoomsComponent.prototype.onAllSelected = function () {
        this.selectedNavButton = 2;
        this.daysBefore = 30;
        this.store.dispatch(this.roomActions.loadRooms(this.skipRooms, this.takeRooms, this.daysBefore));
    };
    TechRoomsComponent.prototype.onItemSelected = function (args) {
        var room = this.roomsArray[args.index];
        var navigationExtras = {
            queryParams: {
                'room': JSON.stringify(room)
            }
        };
        this.routerExtensions.navigate(["/room-repairs"], navigationExtras);
    };
    TechRoomsComponent.prototype.aIsPending = function (item) {
        return !item.EndAt;
    };
    TechRoomsComponent = __decorate([
        core_1.Component({
            selector: "tech-rooms",
            templateUrl: "pages/tech-rooms/tech-rooms.html",
            styleUrls: ["pages/tech-rooms/tech-rooms-common.css", "pages/tech-rooms/tech-rooms.css"],
            providers: [technitian_list_service_1.TechnitianListService]
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions,
            page_1.Page,
            room_service_1.RoomService,
            technitian_list_service_1.TechnitianListService,
            core_1.NgZone,
            store_1.Store,
            index_1.RoomActions,
            core_1.ChangeDetectorRef])
    ], TechRoomsComponent);
    return TechRoomsComponent;
}(drawer_page_1.DrawerPage));
exports.TechRoomsComponent = TechRoomsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVjaC1yb29tcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZWNoLXJvb21zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFvRztBQUNwRyxnQ0FBK0I7QUFDL0Isc0RBQStEO0FBRy9ELDJFQUE2RTtBQUU3RSwrREFBNkQ7QUFFN0QsMkZBQXdGO0FBR3hGLDhDQUE0QztBQU01QyxxQ0FBb0M7QUFDcEMsNkNBQWtEO0FBQ2xELDBFQUF3RTtBQUN4RSxrQ0FBZSxDQUFDLEtBQUssRUFBRSxjQUFNLE9BQUEsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsR0FBRyxFQUFoRCxDQUFnRCxDQUFDLENBQUM7QUFDL0UsK0NBQWdEO0FBUWhEO0lBQXdDLHNDQUFVO0lBZTlDLDRCQUFvQixnQkFBa0MsRUFDMUMsSUFBVSxFQUNWLFdBQXdCLEVBQ3hCLHFCQUE0QyxFQUM1QyxJQUFZLEVBQ1osS0FBc0IsRUFDdEIsV0FBd0IsRUFDeEIsaUJBQW9DO1FBUGhELFlBUUksa0JBQU0saUJBQWlCLENBQUMsU0FlM0I7UUF2Qm1CLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDMUMsVUFBSSxHQUFKLElBQUksQ0FBTTtRQUNWLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLDJCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsVUFBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFdBQUssR0FBTCxLQUFLLENBQWlCO1FBQ3RCLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLHVCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFsQmhELGVBQVMsR0FBVyxDQUFDLENBQUM7UUFDdEIsZUFBUyxHQUFXLEVBQUUsQ0FBQztRQUN2Qix1QkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDdEIsZ0JBQVUsR0FBRyxDQUFDLENBQUM7UUFHZixlQUFTLEdBQWdCLEVBQUUsQ0FBQztRQUM1QixXQUFLLEdBQUcsRUFBRSxDQUFD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QUksQ0FBQyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQWpGUSxrQkFBa0I7UUFOOUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFdBQVcsRUFBRSxrQ0FBa0M7WUFDL0MsU0FBUyxFQUFFLENBQUMsd0NBQXdDLEVBQUUsaUNBQWlDLENBQUM7WUFDeEYsU0FBUyxFQUFFLENBQUMsK0NBQXFCLENBQUM7U0FDckMsQ0FBQzt5Q0FnQndDLHlCQUFnQjtZQUNwQyxXQUFJO1lBQ0csMEJBQVc7WUFDRCwrQ0FBcUI7WUFDdEMsYUFBTTtZQUNMLGFBQUs7WUFDQyxtQkFBVztZQUNMLHdCQUFpQjtPQXRCdkMsa0JBQWtCLENBMkc5QjtJQUFELHlCQUFDO0NBQUEsQUEzR0QsQ0FBd0Msd0JBQVUsR0EyR2pEO0FBM0dZLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBOZ1pvbmUsIEVsZW1lbnRSZWYsIFZpZXdDaGlsZCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTmF2aWdhdGlvbkV4dHJhcyB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgVG5zU2lkZURyYXdlciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtc2lkZWRyYXdlclwiO1xyXG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvblNldHRpbmdzIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uLXNldHRpbmdzXCI7XHJcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3Jvb20vcm9vbVwiO1xyXG5pbXBvcnQgeyBSb29tU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9yb29tL3Jvb20uc2VydmljZSc7XHJcbmltcG9ydCB7IFRlY2huaXRpYW4gfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3RlY2huaXRpYW4vdGVjaG5pdGlhblwiO1xyXG5pbXBvcnQgeyBUZWNobml0aWFuTGlzdFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3RlY2huaXRpYW4vdGVjaG5pdGlhbi1saXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlckNvbXBvbmVudCwgU2lkZURyYXdlclR5cGUgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXByby11aS9zaWRlZHJhd2VyL2FuZ3VsYXJcIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlciB9IGZyb20gJ25hdGl2ZXNjcmlwdC1wcm8tdWkvc2lkZWRyYXdlcic7XHJcbmltcG9ydCB7IERyYXdlclBhZ2UgfSBmcm9tIFwiLi4vZHJhd2VyLnBhZ2VcIjtcclxuaW1wb3J0IHsgTGlzdFZpZXdFdmVudERhdGEsIFJhZExpc3RWaWV3IH0gZnJvbSAnbmF0aXZlc2NyaXB0LXByby11aS9saXN0dmlldyc7XHJcbmltcG9ydCB7IGxheW91dCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3V0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCAqIGFzIGZyYW1lTW9kdWxlIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBBcHBTdGF0ZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vycy9pbmRleFwiO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gXCJAbmdyeC9zdG9yZVwiO1xyXG5pbXBvcnQgeyBSb29tQWN0aW9ucyB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL2luZGV4XCI7XHJcbmltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbnJlZ2lzdGVyRWxlbWVudChcIkZhYlwiLCAoKSA9PiByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWZsb2F0aW5nYWN0aW9uYnV0dG9uXCIpLkZhYik7XHJcbmltcG9ydCAqIGFzIGZyb21Sb290IGZyb20gXCIuLi8uLi9yZWR1Y2Vycy9pbmRleFwiXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcInRlY2gtcm9vbXNcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcInBhZ2VzL3RlY2gtcm9vbXMvdGVjaC1yb29tcy5odG1sXCIsXHJcbiAgICBzdHlsZVVybHM6IFtcInBhZ2VzL3RlY2gtcm9vbXMvdGVjaC1yb29tcy1jb21tb24uY3NzXCIsIFwicGFnZXMvdGVjaC1yb29tcy90ZWNoLXJvb21zLmNzc1wiXSxcclxuICAgIHByb3ZpZGVyczogW1RlY2huaXRpYW5MaXN0U2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRlY2hSb29tc0NvbXBvbmVudCBleHRlbmRzIERyYXdlclBhZ2UgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcm9vbXM6IE9ic2VydmFibGU8YW55PjtcclxuICAgIGlzTG9hZGluZzogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIHJvb21zQXJyYXk6IEFycmF5PFJvb20+O1xyXG4gICAgc2tpcFJvb21zOiBudW1iZXIgPSAwO1xyXG4gICAgdGFrZVJvb21zOiBudW1iZXIgPSAyMDtcclxuICAgIHNlbGVjdGVkTmF2QnV0dG9uID0gMTtcclxuICAgIGRheXNCZWZvcmUgPSAwO1xyXG4gICAgXHJcbiAgICBzZWxlY3RlZDogbnVtYmVyO1xyXG4gICAgcm9vbXNMaXN0OiBBcnJheTxSb29tPiA9IFtdO1xyXG4gICAgcm9vb20gPSBcIlwiO1xyXG4gICAgdGVjaG5pdGlhbjogVGVjaG5pdGlhbjtcclxuICAgIGlzQ2xlYW46IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlckV4dGVuc2lvbnM6IFJvdXRlckV4dGVuc2lvbnMsXHJcbiAgICAgICAgcHJpdmF0ZSBwYWdlOiBQYWdlLFxyXG4gICAgICAgIHByaXZhdGUgcm9vbVNlcnZpY2U6IFJvb21TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgdGVjaG5pdGlhbkxpc3RTZXJ2aWNlOiBUZWNobml0aWFuTGlzdFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUsXHJcbiAgICAgICAgcHJpdmF0ZSBzdG9yZTogU3RvcmU8QXBwU3RhdGU+LFxyXG4gICAgICAgIHByaXZhdGUgcm9vbUFjdGlvbnM6IFJvb21BY3Rpb25zLFxyXG4gICAgICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICAgICAgc3VwZXIoY2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2godGhpcy5yb29tQWN0aW9ucy5sb2FkUm9vbXModGhpcy5za2lwUm9vbXMsIHRoaXMudGFrZVJvb21zLCB0aGlzLmRheXNCZWZvcmUpKTtcclxuXHJcbiAgICAgICAgdGhpcy5yb29tcyA9IHN0b3JlLnNlbGVjdChmcm9tUm9vdC5nZXRSb29tcyk7XHJcbiAgICAgICAgdGhpcy5yb29tcy5zdWJzY3JpYmUocm9vbXMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJvb21zQXJyYXkgPSBuZXcgQXJyYXk8Um9vbT4oKTtcclxuICAgICAgICAgICAgcm9vbXMuZm9yRWFjaChyb29tID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vbXNBcnJheS5wdXNoKHJvb20pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gc3RvcmUuc2VsZWN0KGZyb21Sb290LmdldFJvb21zTG9hZGluZyk7XHJcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcuc3Vic2NyaWJlKGxvYWRpbmcgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShsb2FkaW5nKSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnBhZ2UuYWN0aW9uQmFySGlkZGVuID0gZmFsc2U7XHJcbiAgICAgICAgLy8gdGhpcy5yb29tcyA9IHRoaXMucm9vbVNlcnZpY2UuZ2V0QWxsUm9vbXMoKTtcclxuXHJcbiAgICAgICAgLy8gbGV0IHRlY2hJZCA9IGFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwiYWN0aXZlVGVjaG5pdGlhbklkXCIpO1xyXG4gICAgICAgIC8vIGlmICh0ZWNoSWQpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy50ZWNobml0aWFuID0gdGhpcy50ZWNobml0aWFuTGlzdFNlcnZpY2UuZ2V0RnJvbUlkKHRlY2hJZCk7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcIi90ZWNobml0aWFuc1wiXSwgeyBjbGVhckhpc3Rvcnk6IHRydWUgfSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVRlY2huaXRpYW4oKSB7XHJcbiAgICAgICAgYXBwbGljYXRpb25TZXR0aW5ncy5zZXRTdHJpbmcoXCJhY3RpdmVUZWNobml0aWFuXCIsIFwiXCIpO1xyXG4gICAgICAgIHRoaXMucm91dGVyRXh0ZW5zaW9ucy5uYXZpZ2F0ZShbXCIvdGVjaG5pdGlhbnNcIl0sIHsgY2xlYXJIaXN0b3J5OiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGVuZGluZ1NlbGVjdGVkKCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWROYXZCdXR0b24gPSAxO1xyXG4gICAgICAgIHRoaXMuZGF5c0JlZm9yZSA9IDA7XHJcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh0aGlzLnJvb21BY3Rpb25zLmxvYWRSb29tcyh0aGlzLnNraXBSb29tcywgdGhpcy50YWtlUm9vbXMsIHRoaXMuZGF5c0JlZm9yZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQWxsU2VsZWN0ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5hdkJ1dHRvbiA9IDI7XHJcbiAgICAgICAgdGhpcy5kYXlzQmVmb3JlID0gMzA7XHJcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh0aGlzLnJvb21BY3Rpb25zLmxvYWRSb29tcyh0aGlzLnNraXBSb29tcywgdGhpcy50YWtlUm9vbXMsIHRoaXMuZGF5c0JlZm9yZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uSXRlbVNlbGVjdGVkKGFyZ3MpIHtcclxuICAgICAgICBsZXQgcm9vbSA9IHRoaXMucm9vbXNBcnJheVthcmdzLmluZGV4XTtcclxuICAgICAgICBsZXQgbmF2aWdhdGlvbkV4dHJhczogTmF2aWdhdGlvbkV4dHJhcyA9IHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgICdyb29tJzogSlNPTi5zdHJpbmdpZnkocm9vbSkgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcIi9yb29tLXJlcGFpcnNcIl0sIG5hdmlnYXRpb25FeHRyYXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFJc1BlbmRpbmcoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiAhaXRlbS5FbmRBdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgb25Td2lwZUNlbGxTdGFydGVkKGFyZ3M6IExpc3RWaWV3RXZlbnREYXRhKSB7XHJcbiAgICAvLyAgICAgdmFyIHN3aXBlTGltaXRzID0gYXJncy5kYXRhLnN3aXBlTGltaXRzO1xyXG4gICAgLy8gICAgIHN3aXBlTGltaXRzLnRocmVzaG9sZCA9IDYwICogbGF5b3V0LmdldERpc3BsYXlEZW5zaXR5KCk7XHJcbiAgICAvLyAgICAgc3dpcGVMaW1pdHMubGVmdCA9IDkwICogbGF5b3V0LmdldERpc3BsYXlEZW5zaXR5KCk7XHJcbiAgICAvLyAgICAgc3dpcGVMaW1pdHMucmlnaHQgPSA4MCAqIGxheW91dC5nZXREaXNwbGF5RGVuc2l0eSgpO1xyXG4gICAgLy8gICAgIHRoaXMuc2VsZWN0ZWQgPSBhcmdzLmluZGV4O1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBvbkxlYXZlKCkge1xyXG4gICAgLy8gICAgIGxldCByYWRMaXN0VmlldyA9IDxSYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJyYWRsaXN0dmlld1wiKTtcclxuICAgIC8vICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcclxuICAgIC8vICAgICAgICAgdGhpcy5yb29tc0xpc3RbdGhpcy5zZWxlY3RlZF0uc3RhdHVzID0gMDtcclxuICAgIC8vICAgICB9KTtcclxuXHJcbiAgICAvLyAgICAgcmFkTGlzdFZpZXcubm90aWZ5U3dpcGVUb0V4ZWN1dGVGaW5pc2hlZCgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBvbkVudGVyKCkge1xyXG4gICAgLy8gICAgIGxldCByYWRMaXN0VmlldyA9IDxSYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJyYWRsaXN0dmlld1wiKTtcclxuICAgIC8vICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcclxuICAgIC8vICAgICAgICAgdGhpcy5yb29tc0xpc3RbdGhpcy5zZWxlY3RlZF0uc3RhdHVzID0gMTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vICAgICByYWRMaXN0Vmlldy5ub3RpZnlTd2lwZVRvRXhlY3V0ZUZpbmlzaGVkKCk7XHJcbiAgICAvLyB9XHJcbn0iXX0=