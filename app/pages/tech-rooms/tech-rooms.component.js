"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var router_1 = require("nativescript-angular/router");
var applicationSettings = require("tns-core-modules/application-settings");
var room_service_1 = require("../../shared/room/room.service");
var technitian_list_service_1 = require("../../shared/technitian/technitian-list.service");
var drawer_page_1 = require("../drawer.page");
var store_1 = require("@ngrx/store");
var index_1 = require("../../actions/index");
var fromRoot = require("../../reducers/index");
var TechRoomsComponent = /** @class */ (function (_super) {
    __extends(TechRoomsComponent, _super);
    function TechRoomsComponent(routerExtensions, page, roomService, technitianListService, zone, store, roomActions, changeDetectorRef) {
        var _this = _super.call(this, changeDetectorRef) || this;
        _this.routerExtensions = routerExtensions;
        _this.page = page;
        _this.roomService = roomService;
        _this.technitianListService = technitianListService;
        _this.zone = zone;
        _this.store = store;
        _this.roomActions = roomActions;
        _this.changeDetectorRef = changeDetectorRef;
        _this.skipRooms = 0;
        _this.takeRooms = 20;
        _this.roomsList = [];
        _this.rooom = "";
        _this.isClean = false;
        _this.store.dispatch(_this.roomActions.loadRooms(_this.skipRooms, _this.takeRooms));
        _this.rooms = store.select(fromRoot.getRooms);
        _this.isLoading = store.select(fromRoot.getRoomsLoading);
        return _this;
    }
    TechRoomsComponent.prototype.ngOnInit = function () {
        this.page.actionBarHidden = false;
        // this.rooms = this.roomService.getAllRooms();
        var techId = applicationSettings.getString("activeTechnitianId");
        if (techId) {
            this.technitian = this.technitianListService.getFromId(techId);
        }
        else {
            this.routerExtensions.navigate(["/technitians"], { clearHistory: true });
        }
    };
    TechRoomsComponent.prototype.changeTechnitian = function () {
        applicationSettings.setString("activeTechnitian", "");
        this.routerExtensions.navigate(["/technitians"], { clearHistory: true });
    };
    TechRoomsComponent = __decorate([
        core_1.Component({
            selector: "tech-rooms",
            templateUrl: "pages/tech-rooms/tech-rooms.html",
            styleUrls: ["pages/tech-rooms/tech-rooms-common.css", "pages/tech-rooms/tech-rooms.css"],
            providers: [technitian_list_service_1.TechnitianListService]
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions,
            page_1.Page,
            room_service_1.RoomService,
            technitian_list_service_1.TechnitianListService,
            core_1.NgZone,
            store_1.Store,
            index_1.RoomActions,
            core_1.ChangeDetectorRef])
    ], TechRoomsComponent);
    return TechRoomsComponent;
}(drawer_page_1.DrawerPage));
exports.TechRoomsComponent = TechRoomsComponent;
//# sourceMappingURL=data:application/json;base64,